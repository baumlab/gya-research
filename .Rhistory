#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
iso.lions<-seq(0, max(N.lions), length.out=100)
iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + assimil*Dt[i]
#(assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
iso.lions<-seq(0, max(N.lions), length.out=100)
iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
iso.lions<-seq(0, max(N.lions), length.out=100)
iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300))
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
iso.lions<-seq(0, max(N.lions), length.out=100)
iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
#   lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
#   lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
warnings()
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
#   iso.lions<-seq(0, max(N.lions), length.out=100)
#   iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
#   iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
#   lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
#   lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300))
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears, c),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=2000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears, c),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=2000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07, c= 2000)
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=1000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07, c= 1000)
getwd()
load("Downloads/tow_mean_mass_size_class_2010_on_forereef_equally_weighted.Rdata")
ls()
head(island.data.mass.class)
str(island.data.mass.class)
2*c(1:10)
log2(1:10)
2^c(1:10)
setwd("/Users/jpwrobinson/Documents/git-repos/gya-research")
setwd("/Users/jpwrobinson/Documents/git_repos/gya-research")
getwd()
?setwd
a<-2
a
a*10
b<-"Cats and dogs"
?read.csv
survey<-read.csv("data/July-7-2016-7pm Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", stringsAsFactors=TRUE)
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", stringsAsFactors=FALSE)
survey<-read.csv("/data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("/data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv")
survey<-read.delim("data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv")
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", header=FALSE)
head(survey)
str(survey)
head(survey)
View(survey)
survey[10,10]
survey[10,12]
survey[1,]
head(survey)
survey<-survey[-1,]
head(survey)
aggregate(Status ~ Location, survey, function(x)length(unique(x)))
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", header=FALSE)
colnames(survey)<-survey[1,]
head(survey)
colnames(survey)
colnames(survey)<-as.character(survey[1,])
head(survey)
colnames(survey)
survey[1,]
as.character(survey[1,])
(survey[1,])
str(survey[1,])
survey[1,]
str(survey[1,])
as.character(survey[1,])
as.character(survey[2,])
3## remove some unnecessary columns
as.character(survey[3,])
head(survey)
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", header=FALSE)
head(survey)
survey[1,]
cols<-survey[1,]
cols
str(cols  )
cols<-vector(survey[1,])
cols<-as.vector(survey[1,])
cols
head(cols)
str(cols)
cols<-as.vector(survey[2,])
head(cols)
survey<-read.csv("data/July-7-2016-7pm-Toronto.csv", header=FALSE)
colnames(survey)<-as.character(unlist(survey[1,]))
head(survey)
survey<-survey[-1,]
survey$Username<-NULL
survey$'Updated At'<-NULL
survey'Number of Saves'<-NULL
head(survey)
survey<-survey[survey$Status="Complete",]
survey<-survey[survey$Status=="Complete",]
aggregate(Status ~ Location, survey, function(x)length(unique(x)))
head(survey)
aggregate(Status ~ Location, survey, length)
qplot(locations$Location, location$Status, geom="bar", stat="identity")
locations<-aggregate(Status ~ Location, survey, length)
qplot(locations$Location, location$Status, geom="bar", stat="identity")
qplot(locations$Location, fill=location$Status, geom="bar", stat="identity")
qplot(locations$Location, y=location$Status, geom="bar", stat="identity")
head(locations)
head(survey)
ggplot(locations, aes(Location, Status)) + geom_bar(stat="identity")
lcations
locations
survey[survey$Location=="",]
survey$date<-str_split_fixed(survey$'Completed At', " ", 1)
require(stringr)
survey$date<-str_split_fixed(survey$'Completed At', " ", 1)
colnames(suryve)
colnames(survey)
survey<-subset(survey, select=c("Location", "Created At", "What is your gender", "What is your field of research"))
survey<-subset(survey, select=c("Location", "Created At", "What is your gender?", "What is your field of research?"))
head(survey)
colnames(survey)<-c("Country", "Date", "Gender", "Field")
field<-aggregate(Location ~ Field, survey, length)
locations<-aggregate(Gender ~ Country, survey, length)
gender<-aggregate(Country ~ Gender, survey, length)
field<-aggregate(Country ~ Field, survey, length)
ggplot(locations, aes(Country, Status)) + geom_bar(stat="identity")
ggplot(locations, aes(Country, Gender)) + geom_bar(stat="identity")
qplot(1:10)
locations
order(lcoations, location$Gender)
order(locations, location$Gender)
order(locations, locations$Gender)
order(locations, by=locations$Gender)
sort(locations, locations$Gender)
?sort
sort(locations$Gender)
sort(locations[locations$Gender,])
sort(locations[,locations$Gender])
sort(locations[locations$Gender])
sort(locations[locations$Gender,])
locations[sort(locations$Gender),]
?order
order(locations)
locations[order(locations$Gender, locations$Country)]
locations[order(locations$Gender, locations$Country),]
locations[order(locations$Gender, locations$Country, decreasing=FALSE),]
locations[order(locations$Gender, locations$Country, decreasing=TRUE),]
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
head(survey)
survey<-survey[survey$Status=="Complete",]
colnames(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research"))
locations<-aggregate(Gender ~ Location, survey, length)
locations<-aggregate(gender ~ Location, survey, length)
field<-aggregate(Location ~ field_research, survey, length)
locations[order(locations$Gender, locations$Country, decreasing=TRUE),]
locations[order(locations$gender, locations$Location, decreasing=TRUE),]
head(locations)
0.2*60
0.2*70
setwd("/Users/jpwrobinson/Documents/git_repos/gya-research")
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
head(survey)
survey<-survey[survey$Status=="Complete",]
colnames(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research", "Country_work", "PhD_Year"))
states<-c("California","New York", "Pennsylvania", "Nebraska", "Massachusetts", "Vermont","Texas",
"Michigan", "Maryland", "Florida", "Washington", "Oregon", "Nevada", "Minnesota", "Arizona",
"Wisconsin", "Virginia", "Utah", "Ohio", "North Carolina", "New Jersey", "New Hampshire",
"Maine", "Louisiana", "Indiana", "Hawaii", "Alabama", "Tennessee", "Oklahoma", "New Mexico",
"Missouri", "Mississippi", "Iowa", "Delaware", "Colorado", "Illinois")
prov<-c("Ontario", "Quebec", "British Columbia", "Alberta", "Nova Scotia", "New Brunswick",
"Newfoundland and Labrador", "Manitoba", "Saskatchewan", "Prince Edward Island", "Yukon Territory",
"Nunavut")
survey$Country<-as.character(survey$Location)
survey$Country<-ifelse(survey$Country%in%states, 'USA', survey$Country)
survey$Country<-ifelse(survey$Country%in%prov, 'Canada', survey$Country)
survey$Country<-as.factor(survey$Country)
locations<-aggregate(gender ~ Country, survey, length)
gender<-aggregate(Location ~ gender, survey, length)
field<-aggregate(Location ~ field_research, survey, length)
country_work<-aggregate(gender ~ Country_work, survey, length)
locations[order(locations$gender, locations$Country, decreasing=TRUE),]
require(ggplot2)
country_work<-transform(country_work,
Country_work = reorder(Country_work, gender))
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")
sessionInfo()
SessionInfo()
