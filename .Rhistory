lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300))
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
iso.lions<-seq(0, max(N.lions), length.out=100)
iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
#   lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
#   lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
warnings()
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
#================================================================
#Lab 5 for FISH458: PART 2: adding isoclines
#Building a predator-prey model in R
#Using the sliders in Rstudio to explore the effect of changing
#model parameters.
#Written by Trevor A. Branch, tbranch@uw.edu
#based on earlier R code by Cole Monnahan
#Started on 29 April 2013
#================================================================
predator.prey.iso <- function(wild0, wildK, lion0, killrate, assimil, nyears,
wildr=0.2, lionsurv=0.8,
arrow.length=0.0, c=2000) {
#define variables to store the numbers of wildebeest and lions in each year
N.wild <- vector(length=nyears)
N.lions <- vector(length=nyears)
Dt <- vector(length=nyears)
#set the numbers of wildebeest and lions in the first year
N.wild[1]<-wild0
N.lions[1]<-lion0
Dt[1]<-0
###### explore predator self-limitation
R.pred<-function(a, D, c){
}
#calculate the number of wildebeest and lions in each year
for (i in 2:nyears){
Dt[i]<-(N.wild[i-1]*(1-exp(-killrate*N.lions[i-1])))
N.wild[i]<-N.wild[i-1] + N.wild[i-1]*wildr*(1-N.wild[i-1]/wildK) - Dt[i]
N.lions[i]<-N.lions[i-1]*lionsurv + (assimil*Dt[i])/(1+(assimil*Dt[i])/c)
}
print(Dt)
#create vectors for iso.lions (a sequence of lions from 0 to the max)
#iso.prey (empty vector of isocline for prey)
#iso.predator (empty vector of isocline for predators)
#   iso.lions<-seq(0, max(N.lions), length.out=100)
#   iso.prey<-wildK/wildr*(wildr - (1-exp(-killrate*iso.lions)))
#   iso.predator<-(iso.lions/assimil)*((1-lionsurv)/(1-exp(-killrate*iso.lions)))
#
#now calculate the isoclines (the number of wildebeest for every iso.lion value)
#make some space below and to the left for the axes, create a 2x1 plot area
par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(5,5,1,5))
#plot numbers by year
plot(x=1:nyears, y=N.wild/1000, type="l", lwd=2, col="blue",
ylab="", xlab="Years", cex.lab=1.2, las=1)
par(new=T)  #plot on the same plot
plot(x=1:nyears, y=N.lions/1000, type="l", lwd=2, col="red", yaxt="n", xaxt="n",
ylab="", xlab="Years", cex.lab=1.2)   #suppress axis
axis(side=4, las=1)  #put another axis on the right for lions
mtext(side=2, "Wildebeest (in thousands)", line=3, cex=1.1, col="blue")
mtext(side=4, "Lions (in thousands)", line=2.5, cex=1.1, col="red")
#phase plane, first create an empty plot with axes 5% bigger than the data and labels for the axes
plot(x=1, y=1, type="n", xaxs="i", yaxs="i", las=1,
xlim=c(0,1.05*max(N.wild))/1000, ylim=c(0,1.05*max(N.lions))/1000,
ylab="Lions (in thousands)", xlab="Wildebeest (in thousands)", cex.lab=1.2)
#plot a series of arrows getting darker with the years
#to show arrows, make arrow.length=0.07
arrows(x0=N.wild[-nyears]/1000, x1=N.wild[-1]/1000, y0=N.lions[-nyears]/1000, y1=N.lions[-1]/1000, lwd=2,
length=arrow.length, col=gray(0.9*(nyears:1)/nyears))
#add lines for the isoclines for prey and predator
#   lines(y=iso.lions/1000,x=iso.prey/1000,col="blue",lwd=2,lty=2)
#   lines(y=iso.lions/1000,x=iso.predator/1000,col="red",lwd=2,lty=2)
}
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300))
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears, c),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=2000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
library(manipulate)
manipulate(predator.prey.iso(wild0, wildK, lion0, killrate, assimil, nyears, c),
wild0=slider(100000, 2000000, initial=1000000),
wildK=slider(1000000, 6000000, initial=1500000),
lion0=slider(100, 10000, initial=8000),
killrate=slider(0.000005, 0.000035, initial=0.000016),
assimil=slider(0.01, 0.2, initial=0.05),
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=2000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07)
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07, c= 2000)
nyears=slider(10,1000, initial=300), c=slider(10, 5000, initial=1000))
predator.prey.iso(wild0=1000000, lion0=8000, wildr=0.2, wildK=1500000, lionsurv=0.8,
killrate=0.000016, assimil=0.05, nyears=300, arrow.length=0.07, c= 1000)
setwd("/Users/jpwrobinson/Documents/git_repos/gya-research")
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
## remove some unnecessary columns
head(survey)
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
survey<-survey[survey$Status=="Complete",]
## Read in and explore the GYA data
setwd("/Users/jpwrobinson/Documents/git_repos/gya-research")
setwd("/Users/kristinatietjen/Documents/git_hub/gya-research")
## read data
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
#colnames(survey)<-as.character(unlist(survey[1,]))
#survey<-survey[-1,]
head(survey)
## remove some unnecessary columns
#survey$Username<-NULL
#survey$'Updated At'<-NULL
#survey'Number of Saves'<-NULL
table(survey$Status)
survey<-survey[survey$Status=="Complete",]
colnames(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research", "Country_work", "PhD_Year"))
states<-c("California","New York", "Pennsylvania", "Nebraska", "Massachusetts", "Vermont","Texas",
"Michigan", "Maryland", "Florida", "Washington", "Oregon", "Nevada", "Minnesota", "Arizona",
"Wisconsin", "Virginia", "Utah", "Ohio", "North Carolina", "New Jersey", "New Hampshire",
"Maine", "Louisiana", "Indiana", "Hawaii", "Alabama", "Tennessee", "Oklahoma", "New Mexico",
"Missouri", "Mississippi", "Iowa", "Delaware", "Colorado", "Illinois")
prov<-c("Ontario", "Quebec", "British Columbia", "Alberta", "Nova Scotia", "New Brunswick",
"Newfoundland and Labrador", "Manitoba", "Saskatchewan", "Prince Edward Island", "Yukon Territory",
"Nunavut")
survey$Country<-as.character(survey$Location)
survey$Country<-ifelse(survey$Country%in%states, 'USA', survey$Country)
survey$Country<-ifelse(survey$Country%in%prov, 'Canada', survey$Country)
survey$Country<-as.factor(survey$Country)
table(survey$Country, survey$Location)
table(survey$Country, survey$field_research)
table(survey$Country)
locations<-aggregate(gender ~ Country, survey, length)
gender<-aggregate(Location ~ gender, survey, length)
field<-aggregate(Location ~ field_research, survey, length)
country_work<-aggregate(gender ~ Country_work, survey, length)
locations[order(locations$gender, locations$Country, decreasing=TRUE),]
country_work<-transform(country_work,
Country_work = reorder(Country_work, gender))
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")
require(ggplot2)
country_work<-transform(country_work,
Country_work = reorder(Country_work, gender))
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")
require(ggplot)
require(scales)
sessionInfo()
install.packages("ggplot2")
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
#Re-install Install packages
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
country_work<-transform(country_work,
Country_work = reorder(Country_work, gender))
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")
theme_set(theme_bw)
theme_set(theme_bw())
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")
head(country_work)
Country_work = reorder(Country_work, gender))
ggplot(country_work, aes(Country_work, gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender))
?transform
?reorder
country_work<-aggregate(gender ~ Country_work, survey, length)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), vjust=-1)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), vjust=-2)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), vjust=-2, angle=90)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), vjust=-2, angle=90, hjust=-1)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), vjust=-2, angle=90, hjust=-2)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-1)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90)) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5)
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(x=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender)) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25, hjust=0.1) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25, hjust=0.01) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25, hjust=0.0001) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25, hjust=0.0001) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity') +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(field, aes(x = reorder(field_research, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 30))
head(field)
(field)
ggplot(field, aes(x = reorder(field_research, -Location), Location)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 30))
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25)
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position="topright")
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
#colnames(survey)<-as.character(unlist(survey[1,]))
#survey<-survey[-1,]
head(survey)
## remove some unnecessary columns
#survey$Username<-NULL
#survey$'Updated At'<-NULL
#survey'Number of Saves'<-NULL
table(survey$Status)
head(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research", "Country_work", "PhD_Year"))
table(survey$Status)
survey<-survey[survey$Status=="Complete",]
colnames(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research", "Country_work", "PhD_Year"))
states<-c("California","New York", "Pennsylvania", "Nebraska", "Massachusetts", "Vermont","Texas",
"Michigan", "Maryland", "Florida", "Washington", "Oregon", "Nevada", "Minnesota", "Arizona",
"Wisconsin", "Virginia", "Utah", "Ohio", "North Carolina", "New Jersey", "New Hampshire",
"Maine", "Louisiana", "Indiana", "Hawaii", "Alabama", "Tennessee", "Oklahoma", "New Mexico",
"Missouri", "Mississippi", "Iowa", "Delaware", "Colorado", "Illinois")
prov<-c("Ontario", "Quebec", "British Columbia", "Alberta", "Nova Scotia", "New Brunswick",
"Newfoundland and Labrador", "Manitoba", "Saskatchewan", "Prince Edward Island", "Yukon Territory",
"Nunavut")
survey$Country<-as.character(survey$Location)
survey$Country<-ifelse(survey$Country%in%states, 'USA', survey$Country)
survey$Country<-ifelse(survey$Country%in%prov, 'Canada', survey$Country)
survey$Country<-as.factor(survey$Country)
################################
#### Summary statistics ########
################################
table(survey$Country)
setwd("/Users/jpwrobinson/Documents/git_repos/gya-research")
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
#colnames(survey)<-as.character(unlist(survey[1,]))
#survey<-survey[-1,]
head(survey)
## remove some unnecessary columns
#survey$Username<-NULL
#survey$'Updated At'<-NULL
#survey'Number of Saves'<-NULL
## check number of complete vs. incomplete
table(survey$Status)
### keep complete data only
survey<-survey[survey$Status=="Complete",]
# add 'date column'
#require(stringr)
#survey$date<-str_split_fixed(survey$'Completed At', " ", 1)
colnames(survey)
survey<-subset(survey, select=c("Location",  "gender", "field_research", "Country_work", "PhD_Year"))
states<-c("California","New York", "Pennsylvania", "Nebraska", "Massachusetts", "Vermont","Texas",
"Michigan", "Maryland", "Florida", "Washington", "Oregon", "Nevada", "Minnesota", "Arizona",
"Wisconsin", "Virginia", "Utah", "Ohio", "North Carolina", "New Jersey", "New Hampshire",
"Maine", "Louisiana", "Indiana", "Hawaii", "Alabama", "Tennessee", "Oklahoma", "New Mexico",
"Missouri", "Mississippi", "Iowa", "Delaware", "Colorado", "Illinois")
prov<-c("Ontario", "Quebec", "British Columbia", "Alberta", "Nova Scotia", "New Brunswick",
"Newfoundland and Labrador", "Manitoba", "Saskatchewan", "Prince Edward Island", "Yukon Territory",
"Nunavut")
survey$Country<-as.character(survey$Location)
survey$Country<-ifelse(survey$Country%in%states, 'USA', survey$Country)
survey$Country<-ifelse(survey$Country%in%prov, 'Canada', survey$Country)
survey$Country<-as.factor(survey$Country)
################################
#### Summary statistics ########
################################
table(survey$Country)
table(survey$Country,survey$gender)
locations<-aggregate(gender ~ Country, survey, length)
gender<-aggregate(Location ~ gender, survey, length)
field<-aggregate(Location ~ field_research, survey, length)
country_work<-aggregate(gender ~ Country_work, survey, length)
head(locations)
survey.table<-table(survey$Country,survey$gender)
class(survey.table)
locations[order(locations$gender, locations$Country, decreasing=TRUE),]
?qplot
qplot(x=Country, y=gender, data=locations, geom="bar")
qplot(x=Country, y=gender, data=locations, geom="bar", stat="identity")
qplot(x=Country, y=gender, data=locations, geom="bar")
qplot(x=Country, y=gender, data=locations, geom="line")
qplot(x=Country, y=gender, data=locations, geom="point")
qplot(x=Country, y=gender, data=locations, geom="boxplot")
qplot(x=Country, y=gender, data=locations, geom="boxplot", col=Country)
head(field)
field<-aggregate(Location ~ field_research + Country_work, survey, length)
qplot(x=field_research, y=Location, data=field, geom="boxplot", col=Country)
qplot(x=Country, y=gender, data=locations, geom="boxplot", col=Country_work)
qplot(x=field_research, y=Location, data=field, geom="boxplot", col=Country_work)
qplot(x=Country_work, y=Location, data=field, geom="boxplot", col=field_research)
head(survey)
qplot(x=Country_work, y=Location, data=survey, geom="boxplot", col=field_research)
qplot(y=Location, data=survey, geom="boxplot", col=field_research)
head(field)
ggplot(data=field, aes(x=Country_work, y=Location, fill=field_research)) + geom_point()
ggplot(data=field, aes(x=Country_work, y=Location, col=field_research)) + geom_bar()
ggplot(data=field, aes(x=Country_work, y=Location, col=field_research)) + geom_bar(stat='identity')
ggplot(data=field, aes(x=Country_work, y=Location, fill=field_research)) + geom_bar(stat='identity')
length(field[field$field_research=="Engineering",])
length(field[field$field_research=="Engineering"])
length(field$field_research[field$field_research=="Engineering"])
sum(field$Location[field$field_research=="Engineering"])
## plot countries with number of responses
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
## plot fields of research with number of responses
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
head(country_work)
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
field<-aggregate(Location ~ field_research + Country_work, survey, length)
## plot fields of research with number of responses
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
field<-aggregate(Location ~ field_research, survey, length)
## plot fields of research with number of responses
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
esponses
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.1, 0.1))
s
ggplot(field, aes(x = reorder(field_research, -Location), Location, fill=field_research)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=Location), vjust=-0.25) + theme(legend.position=c(0.8, 0.8))
head(survey)
head(locations)
?subset
head(survey)
tail(survey)
subset(survey, Country=="Canada")
country_work<-aggregate(gender ~ Country, survey, length)
##
## plot countries with number of responses
ggplot(country_work, aes(x = reorder(Country_work, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
ggplot(country_work, aes(x = reorder(Country, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country_work), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
## plot countries with number of responses
ggplot(country_work, aes(x = reorder(Country, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=country), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
head(country_work)
responses
ggplot(country_work, aes(x = reorder(Country, -gender), gender)) + geom_bar(stat='identity',position = position_dodge(width=0.5)) +
theme(axis.text.x=element_blank()) + labs(y="Number of responses",x="")  +
geom_text(aes(label=gender), vjust=-0.25) +
geom_text(aes(label=Country), angle=90, hjust=-0.5) + lims(y=c(0, 1300))
head(surveys )
head(survey )
View(survey)
survey<-read.csv("data/July-7-2016-7pm-Toronto_simplified.csv", header=TRUE)
View(survey)
